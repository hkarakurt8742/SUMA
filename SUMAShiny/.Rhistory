if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(model_clusters , sce$cell_line_demuxlet)
sce <- sce_sc_10x_qc
number_of_genes <- 1000
stats <- perCellQCMetrics(sce, subsets=list(Mito=which(rownames(sce) == mito_gene)))
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$subsets_Mito_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "Mitochondrial Gene Percentage")
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
high.mito <- isOutlier(stats$subsets_Mito_percent , nmads = 3 , type = "both")
discard <- high.sum | high.total | high.mito
sce$discard <- discard
is.mito <- grepl(mito_gene , rownames(sce))
sce <- addPerCellQCMetrics(sce, subsets=list(Mito=is.mito))
sce <- sce[,!(high.sum | high.total | high.mito)]
is.mito <- grepl(mito_gene , rownames(sce))
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVar(sce)
top <- getTopHVGs(dec , n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
number_of_genes <- 2000
sce <- sce_sc_10x_qc
stats <- perCellQCMetrics(sce, subsets=list(Mito=which(rownames(sce) == mito_gene)))
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$subsets_Mito_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "Mitochondrial Gene Percentage")
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
high.mito <- isOutlier(stats$subsets_Mito_percent , nmads = 3 , type = "both")
discard <- high.sum | high.total | high.mito
sce$discard <- discard
is.mito <- grepl(mito_gene , rownames(sce))
sce <- addPerCellQCMetrics(sce, subsets=list(Mito=is.mito))
sce <- sce[,!(high.sum | high.total | high.mito)]
is.mito <- grepl(mito_gene , rownames(sce))
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVar(sce)
top <- getTopHVGs(dec , n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(model_clusters , sce$cell_line_demuxlet)
sce <- sce_sc_Dropseq_qc
number_of_genes <- 1000
stats <- perCellQCMetrics(sce, subsets=list(Mito=which(rownames(sce) == mito_gene)))
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$subsets_Mito_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "Mitochondrial Gene Percentage")
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
high.mito <- isOutlier(stats$subsets_Mito_percent , nmads = 3 , type = "both")
discard <- high.sum | high.total | high.mito
sce$discard <- discard
is.mito <- grepl(mito_gene , rownames(sce))
sce <- addPerCellQCMetrics(sce, subsets=list(Mito=is.mito))
sce <- sce[,!(high.sum | high.total | high.mito)]
is.mito <- grepl(mito_gene , rownames(sce))
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVar(sce)
top <- getTopHVGs(dec , n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(model_clusters , sce$cell_line_demuxlet)
number_of_genes <- 1500
sce <- sce_sc_Dropseq_qc
stats <- perCellQCMetrics(sce, subsets=list(Mito=which(rownames(sce) == mito_gene)))
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$subsets_Mito_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "Mitochondrial Gene Percentage")
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
high.mito <- isOutlier(stats$subsets_Mito_percent , nmads = 3 , type = "both")
discard <- high.sum | high.total | high.mito
sce$discard <- discard
is.mito <- grepl(mito_gene , rownames(sce))
sce <- addPerCellQCMetrics(sce, subsets=list(Mito=is.mito))
sce <- sce[,!(high.sum | high.total | high.mito)]
is.mito <- grepl(mito_gene , rownames(sce))
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVar(sce)
top <- getTopHVGs(dec , n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(sce$cell_line_demuxlet , model_clusters)
sce <- sce_sc_Dropseq_qc
number_of_genes <- 2000
stats <- perCellQCMetrics(sce, subsets=list(Mito=which(rownames(sce) == mito_gene)))
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$subsets_Mito_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "Mitochondrial Gene Percentage")
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
high.mito <- isOutlier(stats$subsets_Mito_percent , nmads = 3 , type = "both")
discard <- high.sum | high.total | high.mito
sce$discard <- discard
is.mito <- grepl(mito_gene , rownames(sce))
sce <- addPerCellQCMetrics(sce, subsets=list(Mito=is.mito))
sce <- sce[,!(high.sum | high.total | high.mito)]
is.mito <- grepl(mito_gene , rownames(sce))
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVar(sce)
top <- getTopHVGs(dec , n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(sce$cell_line_demuxlet , model_clusters)
sce <- sce_sc_CELseq2_qc
number_of_genes <- 1000
is.spike <- grepl("^ERCC", rownames(sce))
sce <- splitAltExps(sce, ifelse(is.spike, "ERCC", "gene"))
stats <- perCellQCMetrics(sce)
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$altexps_ERCC_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "ERCC Expression Percentage")
sum(is.spike)
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
spike.drop <- isOutlier(stats$altexps_ERCC_percent, nmads=3, type="both")
discard <- high.sum | high.total | spike.drop
sce <- addPerCellQCMetrics(sce, subsets=list(Spike=is.spike))
sce$discard <- discard
sce <- sce[,!(high.sum | high.total | spike.drop)]
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVarWithSpikes(sce , "ERCC")
top <- getTopHVGs(dec ,  n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(sce$cell_line , model_clusters)
number_of_genes <- 1500
sce <- sce_sc_CELseq2_qc
is.spike <- grepl("^ERCC", rownames(sce))
sce <- splitAltExps(sce, ifelse(is.spike, "ERCC", "gene"))
stats <- perCellQCMetrics(sce)
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$altexps_ERCC_percent))
colnames(stats_table) <- c("Sum" , "Detected" , "ERCC Expression Percentage")
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
spike.drop <- isOutlier(stats$altexps_ERCC_percent, nmads=3, type="both")
discard <- high.sum | high.total | spike.drop
sce <- addPerCellQCMetrics(sce, subsets=list(Spike=is.spike))
sce$discard <- discard
sce <- sce[,!(high.sum | high.total | spike.drop)]
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVarWithSpikes(sce , "ERCC")
top <- getTopHVGs(dec ,  n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(sce$cell_line , model_clusters)
number_of_genes <- 2000
sce <- sce_sc_CELseq2_qc
is.spike <- grepl("^ERCC", rownames(sce))
sce <- splitAltExps(sce, ifelse(is.spike, "ERCC", "gene"))
stats <- perCellQCMetrics(sce)
stats_table <- cbind(summary(stats$sum) , summary(stats$detected) ,
summary(stats$altexps_ERCC_percent))
high.sum <- isOutlier(stats$sum, nmads = 3, type="both")
high.total <- isOutlier(stats$total, nmads = 3, type="both")
spike.drop <- isOutlier(stats$altexps_ERCC_percent, nmads=3, type="both")
discard <- high.sum | high.total | spike.drop
sce <- addPerCellQCMetrics(sce, subsets=list(Spike=is.spike))
sce$discard <- discard
sce <- sce[,!(high.sum | high.total | spike.drop)]
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster=clusters)
sce <- logNormCounts(sce)
dec <- modelGeneVarWithSpikes(sce , "ERCC")
top <- getTopHVGs(dec ,  n = number_of_genes)
sce <- denoisePCA(sce, subset.row=top, technical=dec)
number_of_pcs <- ncol(reducedDim(sce))
denoised_pca <- getDenoisedPCs(logcounts(sce) , subset.row = top , technical = dec)
denoised_pca_perc <- denoised_pca[["percent.var"]]
explained_var_perc <- sum(denoised_pca_perc[1:number_of_pcs])
algorithms <- c(rep(1,50),rep(2,50),rep(3,50))
model_data <- as.data.frame(cbind(rep(ncol(sce), 150),
rep(1:50,3),
rep(number_of_pcs,150),
rep(number_of_genes,150),
algorithms,
rep(explained_var_perc,150),
rep(1,150)))
colnames(model_data) <- c("Number_of_Cells" , "Number_of_Neighbours" ,
"Number_of_PCs" , "Number_of_HVGs" , "Algorithm" ,
"var_perc" , "Exp_Type")
model_data$Number_of_Cells <- as.integer(model_data$Number_of_Cells)
model_data$Number_of_Neighbours <- as.integer(model_data$Number_of_Neighbours)
model_data$Number_of_PCs <- as.integer(model_data$Number_of_PCs)
model_data$Number_of_HVGs <- as.integer(model_data$Number_of_HVGs)
model_data$Algorithm <- as.integer(model_data$Algorithm)
model_data$Exp_Type <- as.integer(model_data$Exp_Type)
model_data$var_perc <- as.numeric(model_data$var_perc)
rf_pred <- rf_pred <- predict(suma_r , newdata = model_data , type = "prob")[,2]
selected_k <- as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1]
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_clusters <- cluster_leiden(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_clusters <- cluster_louvain(buildSNNGraph(sce , k = selected_k))$membership
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_clusters <- cluster_walktrap(buildSNNGraph(sce , k = selected_k))$membership
}
model_clusters <- as.factor(model_clusters)
model_selected_algorithm <- c()
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 1) {
model_selected_algorithm <- "Leiden"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 2) {
model_selected_algorithm <- "Louvain"
}
if (model_data[as.numeric(names(sort(rf_pred , decreasing = TRUE)))[1],]$Algorithm == 3) {
model_selected_algorithm <- "Walktrap"
}
adjustedRandIndex(sce$cell_line , model_clusters)
library(knitr)
library(dplyr)
library(ggplot2)
analysis_results <- read.table("clustering_results.txt" , sep = "\t" , header = T)
high_analysis_results <- read.table("clustering_results_w_high_ami.txt" , sep = "\t" , header = T)
data_properties <- read.table("data_pro.txt" , sep = "\t" , header = T)
View(high_analysis_results)
kable(data_properties , "pipe" , align = "lccrr")
print(min(analysis_results$var_perc))
print(max(analysis_results$var_perc))
